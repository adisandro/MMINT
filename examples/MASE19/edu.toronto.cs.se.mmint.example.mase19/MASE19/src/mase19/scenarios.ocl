/*******************************************************************************
 * Copyright (c) 2012, 2025 Alessio Di Sandro.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Alessio Di Sandro - Implementation
 *******************************************************************************/
import 'http://se.cs.toronto.edu/mmint/MID'
import 'http://se.cs.toronto.edu/modelepedia/ClassDiagram'
import 'http://se.cs.toronto.edu/modelepedia/GSN'

context mid::ModelElement

def: connectedModelElems : OrderedSet(ModelElement) =
  let mid = self.oclContainer().oclContainer().oclAsType(MID) in
  let rels = mid.models->select(oclIsTypeOf(relationship::ModelRel))
                       ->collect(oclAsType(relationship::ModelRel)) in
  let modelElems = rels->collect(mappings)
                       ->collect(modelElemEndpoints)
                       ->collect(target.oclAsType(ModelElement))
                       ->asOrderedSet() in
  modelElems->select(modelElemTgt |
    self <> modelElemTgt and
    rels->exists(rel |
      rel.mappings->exists(mapping |
        mapping.modelElemEndpoints->collect(target)
                                  ->includesAll(Set{self, modelElemTgt}))))

context mid::MID

def: connectedModelElems1 : Set(Tuple(src : ModelElement,
                                      tgt : ModelElement)) =
  let modelElems = ModelElement.allInstances() in
  modelElems->collect(e | Set{e}->product(connectedModelElems2(e)))->asSet()

def: connectedModelElems2(modelElemSrc : ModelElement) : Set(ModelElement) =
  modelElemSrc.connectedModelElems->asSet()

def: connectedModelElems3(modelElemSrc : ModelElement,
                          modelElemTgt : ModelElement) : Boolean =
  connectedModelElems2(modelElemSrc)->includes(modelElemTgt)

def: allConnectedModelElems1 : Set(Tuple(src : ModelElement,
                                         tgt : ModelElement)) =
  let modelElems = ModelElement.allInstances() in
  modelElems->collect(e | Set{e}->product(allConnectedModelElems2(e)))->asSet()

def: allConnectedModelElems2(modelElemSrc : ModelElement) : Set(ModelElement) =
  modelElemSrc->closure(connectedModelElems)->excluding(modelElemSrc)

def: allConnectedModelElems3(modelElemSrc : ModelElement,
                             modelElemTgt : ModelElement) : Boolean =
  allConnectedModelElems2(modelElemSrc)->includes(modelElemTgt)

def: asilBConnectedModelElems : Set(Tuple(goal : gsn::Goal, elem : ModelElement)) =
  let safetyCases = Model.allInstances()
                         ->collect(EMFInstanceRoot)
                         ->select(oclIsTypeOf(gsn::SafetyCase))
                         ->collect(oclAsType(gsn::SafetyCase)) in
  let goals = safetyCases->collect(goals)
                         ->select(not asil.oclIsUndefined())
                         ->select(asil.value = gsn::ASILLevel::B) in
  let modelElems = ModelElement.allInstances() in
  goals->collect(g | Set{g}->product(
         let goalElem = modelElems->any(e |
           e.name.substring(e.name.size()-g.id.size()+1, e.name.size()) = g.id) in
         if goalElem.oclIsUndefined() then Set{} else connectedModelElems2(goalElem) endif))
       ->asSet()

def: highlyConnectedModelElems : Set(Tuple(elem : ModelElement, conn : Integer)) =
  let modelElems = ModelElement.allInstances() in
  modelElems->select(e | connectedModelElems2(e)->size() > 5)
            ->collect(he | Tuple{elem=he, conn=connectedModelElems2(he)->size()})
            ->asSet()
