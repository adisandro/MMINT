/*******************************************************************************
 * Copyright (c) 2022, 2025 Alessio Di Sandro.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Alessio Di Sandro - Implementation
 *******************************************************************************/
package vamos23

import "http://se.cs.toronto.edu/modelepedia/ClassDiagram"

// Finds public attributes
pattern publicAttributes(attribute: Attribute) {
  Attribute.public(attribute, true);
}

// Finds attributes in a class that has a superclass
pattern subAttributes(clazz: Class, attribute: Attribute) {
  Class.superclass(clazz, _);
  Class.ownedAttributes(clazz, attribute);
}

// Finds two superclasses connected by an association,
// each with a subclass
pattern superAssociations(super1: Class, super2: Class,
                          association: Association) {
  super1 != super2;
  Class.superclass(sub1, super1);
  Class.superclass(sub2, super2);
  sub1 != sub2;
  Class.associationsAsSource(super1, association);
  Class.associationsAsTarget(super2, association);
}

// Counts the number of incoming associations of each class
pattern classAssociations(clazz: Class,
                          associations: java Integer) {
  associations == count Class.associationsAsTarget(clazz, _);
}

// Finds the max name in lexicographic order
pattern leximaxName(maxName: java String) {
  maxName == max NamedElement.name(_, #name);
}
