package jase20

import "http://se.cs.toronto.edu/mmint/MID"
import "http://se.cs.toronto.edu/mmint/MID/Relationship"
import "edu.toronto.cs.se.mmint.jase20.iso26262.gsn"
import "edu.toronto.cs.se.mmint.jase20.iso26262.hara"
import "edu.toronto.cs.se.mmint.jase20.iso26262.sysml"

pattern a1(hazard: Hazard) {
  OperationalSituation(situation);
  neg Hazard.events.situation(hazard, situation);
}

pattern a2(situation: OperationalSituation) {
  Hazard(hazard);
  neg OperationalSituation.events.hazard(situation, hazard);
}

pattern b(event: HazardousEvent) {
  HazardousEvent.situation(event, eventSituation);
  HazardousEvent.hazard(event, hazard);
  find library.connectedEMFObjects(hazard, item);
  neg find library.connectedEMFObjects(item, eventSituation);
}

pattern c_rulesASILQM(event: HazardousEvent) {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.controllability(event, "C1");
} or {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.exposure(event, "E1");
} or {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.exposure(event, "E2");
} or {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.exposure(event, "E3");
  HazardousEvent.controllability(event, "C2");
} or {
  HazardousEvent.severity(event, "S2");
  HazardousEvent.exposure(event, "E1");
}

pattern c_rulesASILA(event: HazardousEvent) {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.exposure(event, "E4");
  HazardousEvent.controllability(event, "C2");
} or {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.exposure(event, "E3");
  HazardousEvent.controllability(event, "C3");
}

pattern c_rulesASILB(event: HazardousEvent) {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.exposure(event, "E4");
  HazardousEvent.controllability(event, "C3");
}

pattern c_rulesASILC(event: HazardousEvent) {
  HazardousEvent.severity(event, "S2");
  HazardousEvent.exposure(event, "E4");
  HazardousEvent.controllability(event, "C3");
} or {
  HazardousEvent.severity(event, "S3");
  HazardousEvent.exposure(event, "E4");
  HazardousEvent.controllability(event, "C2");
} or {
  HazardousEvent.severity(event, "S3");
  HazardousEvent.exposure(event, "E3");
  HazardousEvent.controllability(event, "C3");
}

pattern c_rulesASILD(event: HazardousEvent) {
  HazardousEvent.severity(event, "S3");
  HazardousEvent.exposure(event, "E4");
  HazardousEvent.controllability(event, "C3");
}

pattern c(event: HazardousEvent) {
  HazardousEvent.ASIL(event, "QM");
  neg find c_rulesASILQM(event);
} or {
  HazardousEvent.ASIL(event, "A");
  neg find c_rulesASILA(event);
} or {
  HazardousEvent.ASIL(event, "B");
  neg find c_rulesASILB(event);
} or {
  HazardousEvent.ASIL(event, "C");
  neg find c_rulesASILC(event);
} or {
  HazardousEvent.ASIL(event, "D");
  neg find c_rulesASILD(event);
}

pattern d(event: HazardousEvent) {
  SafetyGoal(goal);
  numGoals == count
    find library.connectedEMFObjects(event, goal);
  check(numGoals == 0);
}

pattern e_eventASIL(goal: SafetyGoal, event: HazardousEvent,
                    asil: java String) {
  find library.connectedEMFObjects(goal, event);
  HazardousEvent.ASIL(event, asil);
}

pattern e(goal: SafetyGoal) {
  SafetyGoal.ASIL(goal, goalASIL);
  maxASIL == max find e_eventASIL(goal, _event, #asil);
  maxASIL != goalASIL;
}
