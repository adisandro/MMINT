/*******************************************************************************
 * Copyright (c) 2021, 2024 Alessio Di Sandro.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Alessio Di Sandro - Implementation
 *******************************************************************************/
package edu.toronto.cs.se.mmint.mid.productline.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import edu.toronto.cs.se.mmint.mid.MID;
import edu.toronto.cs.se.mmint.mid.MIDPackage;
import edu.toronto.cs.se.mmint.mid.productline.PLMIDFactory;
import edu.toronto.cs.se.mmint.mid.productline.util.PLMIDAdapterFactory;
import edu.toronto.cs.se.mmint.mid.relationship.ExtendibleElementReference;
import edu.toronto.cs.se.mmint.mid.relationship.ModelRel;
import edu.toronto.cs.se.mmint.mid.relationship.RelationshipPackage;
import edu.toronto.cs.se.mmint.mid.relationship.util.RelationshipSwitch;
import edu.toronto.cs.se.mmint.mid.util.MIDSwitch;
import edu.toronto.cs.se.mmint.productline.provider.PLEditPlugin;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PLMIDItemProviderAdapterFactory extends PLMIDAdapterFactory implements ComposeableAdapterFactory,
  IChangeNotifier, IDisposable {
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PLMIDItemProviderAdapterFactory() {
    this.supportedTypes.add(IEditingDomainItemProvider.class);
    this.supportedTypes.add(IStructuredItemContentProvider.class);
    this.supportedTypes.add(ITreeItemContentProvider.class);
    this.supportedTypes.add(IItemLabelProvider.class);
    this.supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.mid.productline.PLModelRel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PLModelRelItemProvider plModelRelItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.mid.productline.PLModelRel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPLModelRelAdapter() {
    if (this.plModelRelItemProvider == null) {
      this.plModelRelItemProvider = new PLModelRelItemProvider(this);
    }

    return this.plModelRelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.mid.productline.PLBinaryModelRel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PLBinaryModelRelItemProvider plBinaryModelRelItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.mid.productline.PLBinaryModelRel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPLBinaryModelRelAdapter() {
    if (this.plBinaryModelRelItemProvider == null) {
      this.plBinaryModelRelItemProvider = new PLBinaryModelRelItemProvider(this);
    }

    return this.plBinaryModelRelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.mid.productline.PLMapping} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PLMappingItemProvider plMappingItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.mid.productline.PLMapping}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPLMappingAdapter() {
    if (this.plMappingItemProvider == null) {
      this.plMappingItemProvider = new PLMappingItemProvider(this);
    }

    return this.plMappingItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.mid.productline.PLBinaryMapping} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PLBinaryMappingItemProvider plBinaryMappingItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.mid.productline.PLBinaryMapping}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPLBinaryMappingAdapter() {
    if (this.plBinaryMappingItemProvider == null) {
      this.plBinaryMappingItemProvider = new PLBinaryMappingItemProvider(this);
    }

    return this.plBinaryMappingItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.mid.productline.PLMappingReference} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PLMappingReferenceItemProvider plMappingReferenceItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.mid.productline.PLMappingReference}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPLMappingReferenceAdapter() {
    if (this.plMappingReferenceItemProvider == null) {
      this.plMappingReferenceItemProvider = new PLMappingReferenceItemProvider(this);
    }

    return this.plMappingReferenceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.mid.productline.PLBinaryMappingReference} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PLBinaryMappingReferenceItemProvider plBinaryMappingReferenceItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.mid.productline.PLBinaryMappingReference}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPLBinaryMappingReferenceAdapter() {
    if (this.plBinaryMappingReferenceItemProvider == null) {
      this.plBinaryMappingReferenceItemProvider = new PLBinaryMappingReferenceItemProvider(this);
    }

    return this.plBinaryMappingReferenceItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return this.parentAdapterFactory == null ? this : this.parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return this.supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      var adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void addListener(INotifyChangedListener notifyChangedListener) {
    this.changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    this.changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void fireNotifyChanged(Notification notification) {
    this.changeNotifier.fireNotifyChanged(notification);

    if (this.parentAdapterFactory != null) {
      this.parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void dispose() {
    if (this.plModelRelItemProvider != null) {
      this.plModelRelItemProvider.dispose();
    }
    if (this.plBinaryModelRelItemProvider != null) {
      this.plBinaryModelRelItemProvider.dispose();
    }
    if (this.plMappingItemProvider != null) {
      this.plMappingItemProvider.dispose();
    }
    if (this.plBinaryMappingItemProvider != null) {
      this.plBinaryMappingItemProvider.dispose();
    }
    if (this.plMappingReferenceItemProvider != null) {
      this.plMappingReferenceItemProvider.dispose();
    }
    if (this.plBinaryMappingReferenceItemProvider != null) {
      this.plBinaryMappingReferenceItemProvider.dispose();
    }
  }

  /**
   * A child creation extender for the {@link MIDPackage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static class MIDChildCreationExtender implements IChildCreationExtender {
    /**
     * The switch for creating child descriptors specific to each extended class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected static class CreationSwitch extends MIDSwitch<Object> {
      /**
       * The child descriptors being populated.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected List<Object> newChildDescriptors;

      /**
       * The domain in which to create the children.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected EditingDomain editingDomain;

      /**
       * Creates the a switch for populating child descriptors in the given domain.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
        this.newChildDescriptors = newChildDescriptors;
        this.editingDomain = editingDomain;
      }

      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      @Override
      public Object caseMID(MID object) {
        this.newChildDescriptors.add(createChildParameter(MIDPackage.Literals.MID__MODELS, PLMIDFactory.eINSTANCE
                                                                                                            .createPLModelRel()));

        this.newChildDescriptors.add(createChildParameter(MIDPackage.Literals.MID__MODELS, PLMIDFactory.eINSTANCE
                                                                                                            .createPLBinaryModelRel()));

        return null;
      }

      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected CommandParameter createChildParameter(Object feature, Object child) {
        return new CommandParameter(null, feature, child);
      }

    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
      ArrayList<Object> result = new ArrayList<>();
      new CreationSwitch(result, editingDomain).doSwitch((EObject) object);
      return result;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public ResourceLocator getResourceLocator() {
      return PLEditPlugin.INSTANCE;
    }
  }

  /**
   * A child creation extender for the {@link RelationshipPackage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static class RelationshipChildCreationExtender implements IChildCreationExtender {
    /**
     * The switch for creating child descriptors specific to each extended class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected static class CreationSwitch extends RelationshipSwitch<Object> {
      /**
       * The child descriptors being populated.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected List<Object> newChildDescriptors;

      /**
       * The domain in which to create the children.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected EditingDomain editingDomain;

      /**
       * Creates the a switch for populating child descriptors in the given domain.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
        this.newChildDescriptors = newChildDescriptors;
        this.editingDomain = editingDomain;
      }

      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      @Override
      public Object caseModelRel(ModelRel object) {
        this.newChildDescriptors.add(createChildParameter(RelationshipPackage.Literals.MODEL_REL__MAPPINGS,
                                                     PLMIDFactory.eINSTANCE.createPLMapping()));

        this.newChildDescriptors.add(createChildParameter(RelationshipPackage.Literals.MODEL_REL__MAPPINGS,
                                                     PLMIDFactory.eINSTANCE.createPLBinaryMapping()));

        this.newChildDescriptors.add(createChildParameter(RelationshipPackage.Literals.MODEL_REL__MAPPING_REFS,
                                                     PLMIDFactory.eINSTANCE.createPLMappingReference()));

        this.newChildDescriptors.add(createChildParameter(RelationshipPackage.Literals.MODEL_REL__MAPPING_REFS,
                                                     PLMIDFactory.eINSTANCE.createPLBinaryMappingReference()));

        return null;
      }

      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      @Override
      public Object caseExtendibleElementReference(ExtendibleElementReference object) {
        this.newChildDescriptors.add(createChildParameter(RelationshipPackage.Literals.EXTENDIBLE_ELEMENT_REFERENCE__CONTAINED_OBJECT,
                                                     PLMIDFactory.eINSTANCE.createPLModelRel()));

        this.newChildDescriptors.add(createChildParameter(RelationshipPackage.Literals.EXTENDIBLE_ELEMENT_REFERENCE__CONTAINED_OBJECT,
                                                     PLMIDFactory.eINSTANCE.createPLBinaryModelRel()));

        this.newChildDescriptors.add(createChildParameter(RelationshipPackage.Literals.EXTENDIBLE_ELEMENT_REFERENCE__CONTAINED_OBJECT,
                                                     PLMIDFactory.eINSTANCE.createPLMapping()));

        this.newChildDescriptors.add(createChildParameter(RelationshipPackage.Literals.EXTENDIBLE_ELEMENT_REFERENCE__CONTAINED_OBJECT,
                                                     PLMIDFactory.eINSTANCE.createPLBinaryMapping()));

        return null;
      }

      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected CommandParameter createChildParameter(Object feature, Object child) {
        return new CommandParameter(null, feature, child);
      }

    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
      ArrayList<Object> result = new ArrayList<>();
      new CreationSwitch(result, editingDomain).doSwitch((EObject) object);
      return result;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public ResourceLocator getResourceLocator() {
      return PLEditPlugin.INSTANCE;
    }
  }

}
