-- @nsURI Ecore=http://www.eclipse.org/emf/2002/Ecore
-- @path Ecore=http://www.eclipse.org/emf/2002/Ecore

module Ecore2Ecore;
create OUT : Ecore from IN1 : Ecore, IN2 : Ecore;

-- Matches EAnnotations that are not 'gmf.link' for EReferences
-- or OCL constraints 
rule EAnnotation2EAnnotation {
	from
		s : Ecore!EAnnotation in IN1 (
			if s.source <> 'http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot'
			then
				if s.source <> 'http://www.eclipse.org/emf/2002/Ecore'
				then
					if s.eModelElement.oclIsTypeOf(Ecore!EReference)
					then
						s.source <> 'gmf.link'
					else
						true
					endif
				else
					false
				endif
			else
				false
			endif
		)
	to
		t : Ecore!EAnnotation (
			details <- s.details->collect(d | thisModule.EStringToStringMapEntry2EStringToStringMapEntry(d)),
			source <- s.source,
			-- EModelElement
			eAnnotations <- s.eAnnotations
		)
}

-- Match all EAnnotation detail entries
lazy rule EStringToStringMapEntry2EStringToStringMapEntry {
	from
		s : Ecore!EStringToStringMapEntry in IN1
	to
		t : Ecore!EStringToStringMapEntry (
			key <- s.key,
			value <- s.value
		)
}

-- Matches all EPackages
rule EPackage2EPackage {
	from
		s : Ecore!EPackage in IN1
	to
		t : Ecore!EPackage (
			-- Adds all EObjects contained by the EPackage + adds the 
			-- EReferences to be converted to EClasses
			eClassifiers <- (Ecore!EClass.allInstancesFrom('IN1')->select(
								c | c.ePackage.name = s.name)).append(
							(Ecore!EReference.allInstancesFrom('IN1')->select(
								ref | ref.eAnnotations->exists(a | a.source = 'gmf.link')))->collect(
								ref | thisModule.EReference2EClass(ref))).append(
							(Ecore!EEnum.allInstancesFrom('IN1')->select(
								enum | enum.ePackage.name = s.name))).append(
							(Ecore!EDataType.allInstancesFrom('IN1')->select(
								dt | dt.ePackage.name = s.name))).append(
							(Ecore!EAnnotation.allInstancesFrom('IN1')->select(
								a | a.eModelElement.name = s.name))).append(
							(Ecore!EPackage.allInstancesFrom('IN1')->select(
								p | if not p.eSuperPackage.oclIsUndefined() then p.eSuperPackage.name = s.name else false endif))),							
			eFactoryInstance <- s.eFactoryInstance,
			eSubpackages <- s.eSubpackages,
			eSuperPackage <- s.eSuperPackage,
			nsPrefix <- s.nsPrefix + '_mavo',
			nsURI <- s.nsURI + '_MAVO',
			eAnnotations <- s.eAnnotations,
			name <- s.name + '_mavo'
		)
}

-- Matches all EEnumLiterals
rule EEnumLiteral2EEnumLiteral {
	from
		s : Ecore!EEnumLiteral in IN1
	to
		t : Ecore!EEnumLiteral (
			literal <- s.literal,
			value <- s.value,
			eAnnotations <- s.eAnnotations,
			name <- s.name
		)
}

-- Matches all EParameters
rule EParameter2EParameter {
	from
		s : Ecore!EParameter in IN1
	to
		t: Ecore!EParameter (
			eOperation <- s.eOperation,
			eAnnotations <- s.eAnnotations,
			name <- s.name,
			eType <- s.eType,
			lowerBound <- s.lowerBound,
			many <- s.many,
			ordered <- s.ordered,
			required <- s.required,
			unique <- s.unique,
			upperBound <- s.upperBound
		)
}

-- Matches all EOperations
rule EOperation2EOperation {
	from
		s : Ecore!EOperation in IN1
	to
		t: Ecore!EOperation (
			eContainingClass <- s.eContainingClass,
			eExceptions <- s.eExceptions,
			eGenericExceptions <- s.eGenericExceptions,
			eParameters <- s.eParameters,
			eTypeParameters <- s.eTypeParameters,
			eAnnotations <- s.eAnnotations,
			name <- s.name,
			eType <- s.eType,
			lowerBound <- s.lowerBound,
			many <- s.many,
			ordered <- s.ordered,
			required <- s.required,
			unique <- s.unique,
			upperBound <- s.upperBound
		)
}

-- Matches the root EClass by determining the EClass with
-- the 'gmf.diagram' annotation
rule RootEClass2RootEClass {
	from
		s : Ecore!EClass in IN1 (
			s.eAnnotations->exists(a | a.source = 'gmf.diagram')
		)
	to
		t : Ecore!EClass (
			abstract <- s.abstract,
			eAttributes <- s.eAttributes,
			eIDAttribute <- s.eIDAttribute,
			eOperations <- s.eOperations,
			eReferences <- s.eReferences,
			eStructuralFeatures <- s.eStructuralFeatures,
			eSuperTypes <- s.eSuperTypes.append(thisModule.getMAVORoot),
			interface <- s.interface,
			eAnnotations <- s.eAnnotations,
			name <- s.name,
			defaultValue <- s.defaultValue,
			eTypeParameters <- s.eTypeParameters,
			instanceClass <- s.instanceClass,
			instanceClassName <- s.instanceClassName,
			instanceTypeName <- s.instanceTypeName
		)
}

-- Matches EClasses with EClasses, and inherits from MAVOElement when necessary
rule EClass2EClass {
	from
		s : Ecore!EClass in IN1 (
			not s.eAnnotations->exists(a | a.source = 'gmf.diagram')						 
		)
	to
		t : Ecore!EClass (
			abstract <- s.abstract,
			eAttributes <- s.eAttributes,
			eIDAttribute <- s.eIDAttribute,
			eOperations <- s.eOperations,
			eReferences <- s.eReferences->collect(
								ref | 
								if ref.eAnnotations->exists(a | a.source = 'gmf.link')
								then
									thisModule.getNewSrcEOpposite(ref)
								else
									if not ref.eOpposite.oclIsUndefined()
									then
										if ref.eOpposite.eAnnotations->exists(a | a.source = 'gmf.link')
										then
											thisModule.getNewTgtEOpposite(ref)
										else
											ref
										endif
									else
										ref
									endif
								endif),
			eSuperTypes <- if thisModule.isMAVOizable(s)
							then
								if s.eSuperTypes->forAll(st | not thisModule.isMAVOizable(st))
								then
									s.eSuperTypes.append(thisModule.getMAVOElement)
								else
									s.eSuperTypes
								endif
							else
									s.eSuperTypes
							endif,
			interface <- s.interface,
			eAnnotations <- s.eAnnotations,
			name <- s.name,
			defaultValue <- s.defaultValue,
			eTypeParameters <- s.eTypeParameters,
			instanceClass <- s.instanceClass,
			instanceClassName <- s.instanceClassName,
			instanceTypeName <- s.instanceTypeName
		)
}

-- Matches all EDataTypes
rule EDataType2EDataType {
	from
		s : Ecore!EDataType in IN1
	to
		t : Ecore!EDataType (
			serializable <- s.serializable,
			eAnnotations <- s.eAnnotations,
			name <- s.name,
			eTypeParameters <- s.eTypeParameters,
			instanceClass <- s.instanceClass,
			instanceClassName <- s.instanceClassName,
			instanceTypeName <- s.instanceTypeName
		)
}

-- Matches all EEnums
rule EEnum2EEnum extends EDataType2EDataType {
	from
		s : Ecore!EEnum in IN1
	to
		t : Ecore!EEnum (
			eLiterals <- s.eLiterals
		)
}

-- Matches all EReferences that do not have the 'gmf.link' annotation
-- and are not EOpposites to EReferences that have the 'gmf.link' annotation
-- (i.e. EReferences that do not need to be converted to EClasses)
rule EReference2EReference {
	from
		s : Ecore!EReference (
			if s.eAnnotations->exists(a | a.source = 'gmf.link')
			then
				false
			else
				if not s.eOpposite.oclIsUndefined()
				then
					if s.eOpposite.eAnnotations->exists(a | a.source = 'gmf.link')
					then
						false
					else
						true
					endif
				else
					true
				endif
			endif
		)
	to
		t : Ecore!EReference (
			containment <- s.containment,
			eKeys <- s.eKeys,
			eOpposite <- s.eOpposite,
			resolveProxies <- s.resolveProxies,
			eAnnotations <- s.eAnnotations,
			name <- s.name,
			eType <- s.eType,
			lowerBound <- s.lowerBound,
			ordered <- s.ordered,
			unique <- s.unique,
			upperBound <- s.upperBound,
			changeable <- s.changeable,
			defaultValue <- s.defaultValue,
			defaultValueLiteral <- s.defaultValueLiteral,
			derived <- s.derived,
			transient <- s.transient,
			unsettable <- s.unsettable,
			volatile <- s.volatile
		)
}

-- Matches all EAttributes
rule EAttribute2EAttribute {
	from
		s : Ecore!EAttribute in IN1
	to
		t : Ecore!EAttribute (
			iD <- s.iD,
			eAnnotations <- s.eAnnotations,
			name <- s.name,
			eType <- s.eType,
			lowerBound <- s.lowerBound,
			ordered <- s.ordered,
			unique <- s.unique,
			upperBound <- s.upperBound,
			changeable <- s.changeable,
			derived <- s.derived,
			transient <- s.transient,
			unsettable <- s.unsettable,
			volatile <- s.volatile
		)	
}

-- Called with EReferences that are to be converted to EClasses
unique lazy rule EReference2EClass {
	from
		s : Ecore!EReference in IN1 (
			s.eAnnotations->exists(a | a.source = 'gmf.link')
		)
	to
		t : Ecore!EClass (
			abstract <- false,
			eSuperTypes <- thisModule.getMAVOReference,
			interface <- false,
			eAnnotations <- s.eAnnotations->collect(a | if a.source = 'gmf.link' then thisModule.getNewAnnotation(a) else false endif),
			name <- s.name.substring(1, 1).toUpper() + s.name.substring(2, s.name.size()) + 'Reference',
			eReferences <- Sequence{(thisModule.getNewSrcEReference(s)), (thisModule.getNewTgtEReference(s))}
		)
}

-- Called with 'gmf.link' EAnnotations that need additional detail entries: 'source' and 'target'
lazy rule getNewAnnotation {
	from
		s : Ecore!EAnnotation
	to
		t : Ecore!EAnnotation (
			eAnnotations <- s.eAnnotations,
			source <- s.source,
			details <- s.details->collect(d | thisModule.EStringToStringMapEntry2EStringToStringMapEntry(d)).append(thisModule.getNewSrcDetails()).append(thisModule.getNewTgtDetails())
		)
}

-- Creates a detail entry: source->'source'
lazy rule getNewSrcDetails {
	from
		s : Ecore!EObject
	to
		t : Ecore!EStringToStringMapEntry (
			key <- 'source',
			value <- 'source'
		)
}

-- Creates a detail entry: target->'target'
lazy rule getNewTgtDetails {
	from
		s : Ecore!EObject
	to
		t : Ecore!EStringToStringMapEntry (
			key <- 'target',
			value <- 'target'
		)
}

-- Creates a new EReference: source, for the new EReference2EClass
unique lazy rule getNewSrcEReference {
	from
		s : Ecore!EReference
	to
		t : Ecore!EReference (
			name <- 'source',
			eType <- s.eContainingClass,
			lowerBound <- 1,
			upperBound <- 1,
			eOpposite <- thisModule.getNewSrcEOpposite(s)
		)
}

-- Creates a new EReference: target, for the new EReference2EClass
unique lazy rule getNewTgtEReference {
	from
		s : Ecore!EReference
	to
		t : Ecore!EReference (
			name <- 'target',
			eType <- s.eReferenceType,
			lowerBound <- 1,
			upperBound <- 1, 
			eOpposite <- if not s.eOpposite.oclIsUndefined() then thisModule.getNewTgtEOpposite(s.eOpposite) else OclUndefined endif
		)
}

-- Creates a new EReference for the EClass that contains the new EReference2EClass
-- (i.e. the EOpposite reference of the source EReference for EReference2EClass)
unique lazy rule getNewSrcEOpposite {
	from
		s : Ecore!EReference
	to
		t : Ecore!EReference (
			name <- s.name,
			eType <- thisModule.EReference2EClass(s),
			eOpposite <- thisModule.getNewSrcEReference(s),
			lowerBound <- s.lowerBound,
			upperBound <- -1,
			containment <- true
		)
}

-- Creates a new EReference for the EClass that is the target of the new EReference2EClass
-- (i.e. the EOpposite reference of the target EReference for EReference2EClass)
unique lazy rule getNewTgtEOpposite {
	from
		s : Ecore!EReference 
	to
		t : Ecore!EReference (
			name <- s.name,
			eType <- thisModule.EReference2EClass(s.eOpposite),
			eOpposite <- thisModule.getNewTgtEReference(s.eOpposite),
			lowerBound <- s.lowerBound,
			upperBound <- -1
		)
}

-- Returns the EClass MAVORoot from the mavo metamodel
helper def : getMAVORoot : Ecore!EClass =
	let allEClasses : Bag(Ecore!EClass) =
		Ecore!EClass.allInstances()->asBag() in
	allEClasses->select(eclass | eclass.name = 'MAVORoot');

-- Returns the EClass MAVOElement from the mavo metamodel
helper def : getMAVOElement : Ecore!EClass =
	let allEClasses : Bag(Ecore!EClass) =
		Ecore!EClass.allInstances()->asBag() in
	allEClasses->select(eclass | eclass.name = 'MAVOElement');

-- Returns the EClass MAVOReference from the mavo metamodel
helper def : getMAVOReference : Ecore!EClass =
	let allEClasses : Bag(Ecore!EClass) =
		Ecore!EClass.allInstances()->asBag() in
	allEClasses->select(eclass | eclass.name = 'MAVOReference');

-- Returns a boolean value stating whether the element is MAVOizable or not
helper def : isMAVOizable(c : Ecore!EClass) : Boolean =
	let allSubEClasses : Sequence(Ecore!EClass) =
		Ecore!EClass.allInstancesFrom('IN1')->select(
		eclass | eclass.eAllSuperTypes.includes(c))->asSequence() in
	if c.eAnnotations->exists(a | a.source.startsWith('gmf.'))
	then
		true
	else
		if allSubEClasses->forAll(sub | thisModule.isMAVOizable(sub))
		then
			true
		else
			false
		endif
	endif;