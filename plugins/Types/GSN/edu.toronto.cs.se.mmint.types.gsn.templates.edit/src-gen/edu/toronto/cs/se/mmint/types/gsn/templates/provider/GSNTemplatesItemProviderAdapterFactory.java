/*******************************************************************************
 * Copyright (c) 2023, 2025 Alessio Di Sandro.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Alessio Di Sandro - Implementation
 *******************************************************************************/
package edu.toronto.cs.se.mmint.types.gsn.templates.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import edu.toronto.cs.se.mmint.types.gsn.templates.GSNTemplatesFactory;
import edu.toronto.cs.se.mmint.types.gsn.templates.util.GSNTemplatesAdapterFactory;
import edu.toronto.cs.se.modelepedia.gsn.GSNPackage;
import edu.toronto.cs.se.modelepedia.gsn.SafetyCase;
import edu.toronto.cs.se.modelepedia.gsn.util.GSNSwitch;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GSNTemplatesItemProviderAdapterFactory extends GSNTemplatesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GSNTemplatesItemProviderAdapterFactory() {
    this.supportedTypes.add(IEditingDomainItemProvider.class);
    this.supportedTypes.add(IStructuredItemContentProvider.class);
    this.supportedTypes.add(ITreeItemContentProvider.class);
    this.supportedTypes.add(IItemLabelProvider.class);
    this.supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.types.gsn.templates.IntDomain} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IntDomainItemProvider intDomainItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.types.gsn.templates.IntDomain}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createIntDomainAdapter() {
    if (this.intDomainItemProvider == null) {
      this.intDomainItemProvider = new IntDomainItemProvider(this);
    }

    return this.intDomainItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.types.gsn.templates.RealDomain} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RealDomainItemProvider realDomainItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.types.gsn.templates.RealDomain}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRealDomainAdapter() {
    if (this.realDomainItemProvider == null) {
      this.realDomainItemProvider = new RealDomainItemProvider(this);
    }

    return this.realDomainItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.types.gsn.templates.EnumDomain} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EnumDomainItemProvider enumDomainItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.types.gsn.templates.EnumDomain}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEnumDomainAdapter() {
    if (this.enumDomainItemProvider == null) {
      this.enumDomainItemProvider = new EnumDomainItemProvider(this);
    }

    return this.enumDomainItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.types.gsn.templates.ValueDomain} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ValueDomainItemProvider valueDomainItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.types.gsn.templates.ValueDomain}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createValueDomainAdapter() {
    if (this.valueDomainItemProvider == null) {
      this.valueDomainItemProvider = new ValueDomainItemProvider(this);
    }

    return this.valueDomainItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.types.gsn.templates.DomainDecompositionStrategy} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainDecompositionStrategyItemProvider domainDecompositionStrategyItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.types.gsn.templates.DomainDecompositionStrategy}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainDecompositionStrategyAdapter() {
    if (this.domainDecompositionStrategyItemProvider == null) {
      this.domainDecompositionStrategyItemProvider = new DomainDecompositionStrategyItemProvider(this);
    }

    return this.domainDecompositionStrategyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.types.gsn.templates.DomainGoal} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainGoalItemProvider domainGoalItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.types.gsn.templates.DomainGoal}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainGoalAdapter() {
    if (this.domainGoalItemProvider == null) {
      this.domainGoalItemProvider = new DomainGoalItemProvider(this);
    }

    return this.domainGoalItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.types.gsn.templates.DomainDecompositionTemplate} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainDecompositionTemplateItemProvider domainDecompositionTemplateItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.types.gsn.templates.DomainDecompositionTemplate}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainDecompositionTemplateAdapter() {
    if (this.domainDecompositionTemplateItemProvider == null) {
      this.domainDecompositionTemplateItemProvider = new DomainDecompositionTemplateItemProvider(this);
    }

    return this.domainDecompositionTemplateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.types.gsn.templates.Property} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyItemProvider propertyItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.types.gsn.templates.Property}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPropertyAdapter() {
    if (this.propertyItemProvider == null) {
      this.propertyItemProvider = new PropertyItemProvider(this);
    }

    return this.propertyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.types.gsn.templates.PropertyDecompositionStrategy} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyDecompositionStrategyItemProvider propertyDecompositionStrategyItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.types.gsn.templates.PropertyDecompositionStrategy}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPropertyDecompositionStrategyAdapter() {
    if (this.propertyDecompositionStrategyItemProvider == null) {
      this.propertyDecompositionStrategyItemProvider = new PropertyDecompositionStrategyItemProvider(this);
    }

    return this.propertyDecompositionStrategyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.types.gsn.templates.PropertyGoal} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyGoalItemProvider propertyGoalItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.types.gsn.templates.PropertyGoal}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPropertyGoalAdapter() {
    if (this.propertyGoalItemProvider == null) {
      this.propertyGoalItemProvider = new PropertyGoalItemProvider(this);
    }

    return this.propertyGoalItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.types.gsn.templates.PropertyDecompositionTemplate} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyDecompositionTemplateItemProvider propertyDecompositionTemplateItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.types.gsn.templates.PropertyDecompositionTemplate}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPropertyDecompositionTemplateAdapter() {
    if (this.propertyDecompositionTemplateItemProvider == null) {
      this.propertyDecompositionTemplateItemProvider = new PropertyDecompositionTemplateItemProvider(this);
    }

    return this.propertyDecompositionTemplateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.types.gsn.templates.FilesContext} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FilesContextItemProvider filesContextItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.types.gsn.templates.FilesContext}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFilesContextAdapter() {
    if (this.filesContextItemProvider == null) {
      this.filesContextItemProvider = new FilesContextItemProvider(this);
    }

    return this.filesContextItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.types.gsn.templates.AnalyticTemplate} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnalyticTemplateItemProvider analyticTemplateItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.types.gsn.templates.AnalyticTemplate}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAnalyticTemplateAdapter() {
    if (this.analyticTemplateItemProvider == null) {
      this.analyticTemplateItemProvider = new AnalyticTemplateItemProvider(this);
    }

    return this.analyticTemplateItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return this.parentAdapterFactory == null ? this : this.parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return this.supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      var adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void addListener(INotifyChangedListener notifyChangedListener) {
    this.changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    this.changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void fireNotifyChanged(Notification notification) {
    this.changeNotifier.fireNotifyChanged(notification);

    if (this.parentAdapterFactory != null) {
      this.parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void dispose() {
    if (this.intDomainItemProvider != null) {
      this.intDomainItemProvider.dispose();
    }
    if (this.realDomainItemProvider != null) {
      this.realDomainItemProvider.dispose();
    }
    if (this.enumDomainItemProvider != null) {
      this.enumDomainItemProvider.dispose();
    }
    if (this.valueDomainItemProvider != null) {
      this.valueDomainItemProvider.dispose();
    }
    if (this.domainDecompositionStrategyItemProvider != null) {
      this.domainDecompositionStrategyItemProvider.dispose();
    }
    if (this.domainGoalItemProvider != null) {
      this.domainGoalItemProvider.dispose();
    }
    if (this.domainDecompositionTemplateItemProvider != null) {
      this.domainDecompositionTemplateItemProvider.dispose();
    }
    if (this.propertyItemProvider != null) {
      this.propertyItemProvider.dispose();
    }
    if (this.propertyDecompositionStrategyItemProvider != null) {
      this.propertyDecompositionStrategyItemProvider.dispose();
    }
    if (this.propertyGoalItemProvider != null) {
      this.propertyGoalItemProvider.dispose();
    }
    if (this.propertyDecompositionTemplateItemProvider != null) {
      this.propertyDecompositionTemplateItemProvider.dispose();
    }
    if (this.filesContextItemProvider != null) {
      this.filesContextItemProvider.dispose();
    }
    if (this.analyticTemplateItemProvider != null) {
      this.analyticTemplateItemProvider.dispose();
    }
  }

  /**
   * A child creation extender for the {@link GSNPackage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static class GSNChildCreationExtender implements IChildCreationExtender {
    /**
     * The switch for creating child descriptors specific to each extended class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected static class CreationSwitch extends GSNSwitch<Object> {
      /**
       * The child descriptors being populated.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected List<Object> newChildDescriptors;

      /**
       * The domain in which to create the children.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected EditingDomain editingDomain;

      /**
       * Creates the a switch for populating child descriptors in the given domain.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
        this.newChildDescriptors = newChildDescriptors;
        this.editingDomain = editingDomain;
      }
      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      @Override
      public Object caseSafetyCase(SafetyCase object) {
        this.newChildDescriptors.add
          (createChildParameter
            (GSNPackage.Literals.SAFETY_CASE__GOALS,
             GSNTemplatesFactory.eINSTANCE.createDomainGoal()));

        this.newChildDescriptors.add
          (createChildParameter
            (GSNPackage.Literals.SAFETY_CASE__GOALS,
             GSNTemplatesFactory.eINSTANCE.createPropertyGoal()));

        this.newChildDescriptors.add
          (createChildParameter
            (GSNPackage.Literals.SAFETY_CASE__STRATEGIES,
             GSNTemplatesFactory.eINSTANCE.createDomainDecompositionStrategy()));

        this.newChildDescriptors.add
          (createChildParameter
            (GSNPackage.Literals.SAFETY_CASE__STRATEGIES,
             GSNTemplatesFactory.eINSTANCE.createPropertyDecompositionStrategy()));

        this.newChildDescriptors.add
          (createChildParameter
            (GSNPackage.Literals.SAFETY_CASE__CONTEXTS,
             GSNTemplatesFactory.eINSTANCE.createFilesContext()));

        this.newChildDescriptors.add
          (createChildParameter
            (GSNPackage.Literals.SAFETY_CASE__TEMPLATES,
             GSNTemplatesFactory.eINSTANCE.createDomainDecompositionTemplate()));

        this.newChildDescriptors.add
          (createChildParameter
            (GSNPackage.Literals.SAFETY_CASE__TEMPLATES,
             GSNTemplatesFactory.eINSTANCE.createPropertyDecompositionTemplate()));

        this.newChildDescriptors.add
          (createChildParameter
            (GSNPackage.Literals.SAFETY_CASE__TEMPLATES,
             GSNTemplatesFactory.eINSTANCE.createAnalyticTemplate()));

        return null;
      }

      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected CommandParameter createChildParameter(Object feature, Object child) {
        return new CommandParameter(null, feature, child);
      }

    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
      ArrayList<Object> result = new ArrayList<>();
      new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
      return result;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public ResourceLocator getResourceLocator() {
      return GSNTemplatesEditPlugin.INSTANCE;
    }
  }

}
