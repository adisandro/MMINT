/*******************************************************************************
 * Copyright (c) 2017, 2025 Alessio Di Sandro, Nick Fung.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Alessio Di Sandro - Implementation
 *     Nick Fung - Implementation
 *******************************************************************************/
package edu.toronto.cs.se.modelepedia.gsn.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import edu.toronto.cs.se.modelepedia.gsn.GSNPackage;
import edu.toronto.cs.se.modelepedia.gsn.util.GSNAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 *
 * @generated
 */
public class GSNItemProviderAdapterFactory extends GSNAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This helps manage the child creation extenders.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(GSNEditPlugin.INSTANCE, GSNPackage.eNS_URI);

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   *
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public GSNItemProviderAdapterFactory() {
    this.supportedTypes.add(IEditingDomainItemProvider.class);
    this.supportedTypes.add(IStructuredItemContentProvider.class);
    this.supportedTypes.add(ITreeItemContentProvider.class);
    this.supportedTypes.add(IItemLabelProvider.class);
    this.supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.SafetyCase} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected SafetyCaseItemProvider safetyCaseItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.SafetyCase}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSafetyCaseAdapter() {
    if (this.safetyCaseItemProvider == null) {
      this.safetyCaseItemProvider = new SafetyCaseItemProvider(this);
    }

    return this.safetyCaseItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.SupportedBy} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected SupportedByItemProvider supportedByItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.SupportedBy}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSupportedByAdapter() {
    if (this.supportedByItemProvider == null) {
      this.supportedByItemProvider = new SupportedByItemProvider(this);
    }

    return this.supportedByItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.InContextOf} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected InContextOfItemProvider inContextOfItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.InContextOf}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createInContextOfAdapter() {
    if (this.inContextOfItemProvider == null) {
      this.inContextOfItemProvider = new InContextOfItemProvider(this);
    }

    return this.inContextOfItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.Goal} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GoalItemProvider goalItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.Goal}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGoalAdapter() {
    if (this.goalItemProvider == null) {
      this.goalItemProvider = new GoalItemProvider(this);
    }

    return this.goalItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.Strategy} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StrategyItemProvider strategyItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.Strategy}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStrategyAdapter() {
    if (this.strategyItemProvider == null) {
      this.strategyItemProvider = new StrategyItemProvider(this);
    }

    return this.strategyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.Solution} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   *
   * @generated
   */
  protected SolutionItemProvider solutionItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.Solution}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSolutionAdapter() {
    if (this.solutionItemProvider == null) {
      this.solutionItemProvider = new SolutionItemProvider(this);
    }

    return this.solutionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.Context} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   *
   * @generated
   */
  protected ContextItemProvider contextItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.Context}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContextAdapter() {
    if (this.contextItemProvider == null) {
      this.contextItemProvider = new ContextItemProvider(this);
    }

    return this.contextItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.Justification} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected JustificationItemProvider justificationItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.Justification}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createJustificationAdapter() {
    if (this.justificationItemProvider == null) {
      this.justificationItemProvider = new JustificationItemProvider(this);
    }

    return this.justificationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.Assumption} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected AssumptionItemProvider assumptionItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.Assumption}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAssumptionAdapter() {
    if (this.assumptionItemProvider == null) {
      this.assumptionItemProvider = new AssumptionItemProvider(this);
    }

    return this.assumptionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.ASIL} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   *
   * @generated
   */
  protected ASILItemProvider asilItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.ASIL}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createASILAdapter() {
    if (this.asilItemProvider == null) {
      this.asilItemProvider = new ASILItemProvider(this);
    }

    return this.asilItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.ImpactAnnotation} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected ImpactAnnotationItemProvider impactAnnotationItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.ImpactAnnotation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createImpactAnnotationAdapter() {
    if (this.impactAnnotationItemProvider == null) {
      this.impactAnnotationItemProvider = new ImpactAnnotationItemProvider(this);
    }

    return this.impactAnnotationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.Template} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TemplateItemProvider templateItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.Template}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTemplateAdapter() {
    if (this.templateItemProvider == null) {
      this.templateItemProvider = new TemplateItemProvider(this);
    }

    return this.templateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.RelationshipDecorator} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationshipDecoratorItemProvider relationshipDecoratorItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.RelationshipDecorator}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRelationshipDecoratorAdapter() {
    if (this.relationshipDecoratorItemProvider == null) {
      this.relationshipDecoratorItemProvider = new RelationshipDecoratorItemProvider(this);
    }

    return this.relationshipDecoratorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.ImpactStep} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImpactStepItemProvider impactStepItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.ImpactStep}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createImpactStepAdapter() {
    if (this.impactStepItemProvider == null) {
      this.impactStepItemProvider = new ImpactStepItemProvider(this);
    }

    return this.impactStepItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.Undeveloped} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UndevelopedItemProvider undevelopedItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.Undeveloped}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createUndevelopedAdapter() {
    if (this.undevelopedItemProvider == null) {
      this.undevelopedItemProvider = new UndevelopedItemProvider(this);
    }

    return this.undevelopedItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return this.parentAdapterFactory == null ? this : this.parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return this.supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      var adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List<IChildCreationExtender> getChildCreationExtenders() {
    return this.childCreationExtenderManager.getChildCreationExtenders();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
    return this.childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ResourceLocator getResourceLocator() {
    return this.childCreationExtenderManager;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void addListener(INotifyChangedListener notifyChangedListener) {
    this.changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    this.changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public void fireNotifyChanged(Notification notification) {
    this.changeNotifier.fireNotifyChanged(notification);

    if (this.parentAdapterFactory != null) {
      this.parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void dispose() {
    if (this.safetyCaseItemProvider != null) {
      this.safetyCaseItemProvider.dispose();
    }
    if (this.supportedByItemProvider != null) {
      this.supportedByItemProvider.dispose();
    }
    if (this.inContextOfItemProvider != null) {
      this.inContextOfItemProvider.dispose();
    }
    if (this.goalItemProvider != null) {
      this.goalItemProvider.dispose();
    }
    if (this.strategyItemProvider != null) {
      this.strategyItemProvider.dispose();
    }
    if (this.solutionItemProvider != null) {
      this.solutionItemProvider.dispose();
    }
    if (this.contextItemProvider != null) {
      this.contextItemProvider.dispose();
    }
    if (this.justificationItemProvider != null) {
      this.justificationItemProvider.dispose();
    }
    if (this.assumptionItemProvider != null) {
      this.assumptionItemProvider.dispose();
    }
    if (this.undevelopedItemProvider != null) {
      this.undevelopedItemProvider.dispose();
    }
    if (this.asilItemProvider != null) {
      this.asilItemProvider.dispose();
    }
    if (this.impactAnnotationItemProvider != null) {
      this.impactAnnotationItemProvider.dispose();
    }
    if (this.templateItemProvider != null) {
      this.templateItemProvider.dispose();
    }
    if (this.relationshipDecoratorItemProvider != null) {
      this.relationshipDecoratorItemProvider.dispose();
    }
    if (this.impactStepItemProvider != null) {
      this.impactStepItemProvider.dispose();
    }
  }

}
