package edu.toronto.cs.se.mmint.viatra.mid

import "http://www.eclipse.org/emf/2002/Ecore"
import "http://se.cs.toronto.edu/mmint/MID"
import "http://se.cs.toronto.edu/mmint/MID/Relationship"

pattern connectedModels(modelSrc: Model, modelTgt: Model) {
  modelSrc != modelTgt;
  ModelRel.modelEndpoints.target(rel, modelSrc);
  ModelRel.modelEndpoints.target(rel, modelTgt);
}

pattern connectedModelElements(modelElemSrc: ModelElement, modelElemTgt: ModelElement) {
  modelElemSrc != modelElemTgt;
  Model.modelElems(modelSrc, modelElemSrc);
  Model.modelElems(modelTgt, modelElemTgt);
  modelSrc != modelTgt;
  Mapping.modelElemEndpoints.target(mapping, modelElemSrc);
  Mapping.modelElemEndpoints.target(mapping, modelElemTgt);
}

pattern connectedEMFObjects(modelObjSrc: EObject, modelObjTgt: EObject) {
  modelObjSrc != modelObjTgt;
  ModelElement.EMFInstanceObject(modelElemSrc, modelObjSrc);
  ModelElement.EMFInstanceObject(modelElemTgt, modelObjTgt);
  find connectedModelElements(modelElemSrc, modelElemTgt);
}

pattern allConnectedModels(modelSrc: Model, modelTgt: Model) {
  modelSrc != modelTgt;
  find connectedModels+(modelSrc, modelTgt);
}

pattern allConnectedModelElements(modelElemSrc: ModelElement, modelElemTgt: ModelElement) {
  modelElemSrc != modelElemTgt;
  Model.modelElems(modelSrc, modelElemSrc);
  Model.modelElems(modelTgt, modelElemTgt);
  modelSrc != modelTgt;
  find connectedModelElements+(modelElemSrc, modelElemTgt);
}

pattern allConnectedEMFObjects(modelObjSrc: EObject, modelObjTgt: EObject) {
  modelObjSrc != modelObjTgt;
  ModelElement.EMFInstanceObject(modelElemSrc, modelObjSrc);
  ModelElement.EMFInstanceObject(modelElemTgt, modelObjTgt);
  find allConnectedModelElements(modelElemSrc, modelElemTgt);
}
