/**
 * Copyright (c) 2012-2025 Marsha Chechik, Alessio Di Sandro, Michalis Famelis,
 * Rick Salay.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alessio Di Sandro - Implementation.
 */
package edu.toronto.cs.se.mmint.mid.operator.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import edu.toronto.cs.se.mmint.mid.operator.util.OperatorAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OperatorItemProviderAdapterFactory extends OperatorAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected Collection<Object> supportedTypes = new ArrayList<>();

	/**
   * This constructs an instance.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	public OperatorItemProviderAdapterFactory() {
    this.supportedTypes.add(IEditingDomainItemProvider.class);
    this.supportedTypes.add(IStructuredItemContentProvider.class);
    this.supportedTypes.add(ITreeItemContentProvider.class);
    this.supportedTypes.add(IItemLabelProvider.class);
    this.supportedTypes.add(IItemPropertySource.class);
  }

	/**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.mid.operator.Operator} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected OperatorItemProvider operatorItemProvider;

	/**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.mid.operator.Operator}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createOperatorAdapter() {
    if (this.operatorItemProvider == null) {
      this.operatorItemProvider = new OperatorItemProvider(this);
    }

    return this.operatorItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.mid.operator.ConversionOperator} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected ConversionOperatorItemProvider conversionOperatorItemProvider;

	/**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.mid.operator.ConversionOperator}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createConversionOperatorAdapter() {
    if (this.conversionOperatorItemProvider == null) {
      this.conversionOperatorItemProvider = new ConversionOperatorItemProvider(this);
    }

    return this.conversionOperatorItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.mid.operator.RandomOperator} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected RandomOperatorItemProvider randomOperatorItemProvider;

	/**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.mid.operator.RandomOperator}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createRandomOperatorAdapter() {
    if (this.randomOperatorItemProvider == null) {
      this.randomOperatorItemProvider = new RandomOperatorItemProvider(this);
    }

    return this.randomOperatorItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.mid.operator.NestingOperator} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected NestingOperatorItemProvider nestingOperatorItemProvider;

	/**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.mid.operator.NestingOperator}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createNestingOperatorAdapter() {
    if (this.nestingOperatorItemProvider == null) {
      this.nestingOperatorItemProvider = new NestingOperatorItemProvider(this);
    }

    return this.nestingOperatorItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.mid.operator.WorkflowOperator} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected WorkflowOperatorItemProvider workflowOperatorItemProvider;

	/**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.mid.operator.WorkflowOperator}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createWorkflowOperatorAdapter() {
    if (this.workflowOperatorItemProvider == null) {
      this.workflowOperatorItemProvider = new WorkflowOperatorItemProvider(this);
    }

    return this.workflowOperatorItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.mmint.mid.operator.GenericEndpoint} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected GenericEndpointItemProvider genericEndpointItemProvider;

	/**
   * This creates an adapter for a {@link edu.toronto.cs.se.mmint.mid.operator.GenericEndpoint}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createGenericEndpointAdapter() {
    if (this.genericEndpointItemProvider == null) {
      this.genericEndpointItemProvider = new GenericEndpointItemProvider(this);
    }

    return this.genericEndpointItemProvider;
  }

	/**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return this.parentAdapterFactory == null ? this : this.parentAdapterFactory.getRootAdapterFactory();
  }

	/**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

	/**
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public boolean isFactoryForType(Object type) {
    return this.supportedTypes.contains(type) || super.isFactoryForType(type);
  }

	/**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

	/**
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      var adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

	/**
   * This adds a listener.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
  public void addListener(INotifyChangedListener notifyChangedListener) {
    this.changeNotifier.addListener(notifyChangedListener);
  }

	/**
   * This removes a listener.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    this.changeNotifier.removeListener(notifyChangedListener);
  }

	/**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
  public void fireNotifyChanged(Notification notification) {
    this.changeNotifier.fireNotifyChanged(notification);

    if (this.parentAdapterFactory != null) {
      this.parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

	/**
   * This disposes all of the item providers created by this factory.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
  public void dispose() {
    if (this.operatorItemProvider != null) {
      this.operatorItemProvider.dispose();
    }
    if (this.conversionOperatorItemProvider != null) {
      this.conversionOperatorItemProvider.dispose();
    }
    if (this.randomOperatorItemProvider != null) {
      this.randomOperatorItemProvider.dispose();
    }
    if (this.nestingOperatorItemProvider != null) {
      this.nestingOperatorItemProvider.dispose();
    }
    if (this.workflowOperatorItemProvider != null) {
      this.workflowOperatorItemProvider.dispose();
    }
    if (this.genericEndpointItemProvider != null) {
      this.genericEndpointItemProvider.dispose();
    }
  }

}
